package tClassifier;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.SequenceFileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;



/*
 *		Class TwitterClassifier
 * 
 *		@desc Classifier of tweets, using mahout and a naive bayes model.
 *			  Process inputs:
 *					-Naive Bayes model trained in Mahout.
 *					-
 *
 *		@author Vicente Ruben Del Pino Ruiz <<ruben.delpino@gmail.com>>
 *
 */
public class TwitterClassifier {

	public static class ClassifierMap extends Mapper<IntWritable, Text, IntWritable, IntWritable> {
		
		private static Classifier classifier;
		
		@Override
		protected void setup(Context context) throws IOException {
			initClassifier(context);
		}

		private static void initClassifier(Context context) throws IOException {
			if (classifier == null) {
				synchronized (ClassifierMap.class) {
					if (classifier == null) {
						classifier = new Classifier(context.getConfiguration());
					}
				}
			}
		}

		 

		public void map(IntWritable key, Text value, Context context) throws IOException, InterruptedException {
		

			int bestCategoryId = classifier.classify(value);
			IntWritable category = new IntWritable(bestCategoryId);
			context.write(key, category);
		

		}
			
	}

	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws Exception {
		if (args.length < 3) {
			System.out.println("Arguments: [model] [documentFrequency] [dictionary] [tweet file] [output directory]");
			return;
		}
		String modelPath = args[0];
		String documentFrequencyPath = args[1];
		String dictionaryPath = args[2];
		String tweetsPath = args[3];
		String outputPath = args[4];

		Configuration conf = new Configuration();

        conf.setStrings(Classifier.MODEL_PATH_CONF, modelPath);
        conf.setStrings(Classifier.DICTIONARY_PATH_CONF, dictionaryPath);
        conf.setStrings(Classifier.DOCUMENT_FREQUENCY_PATH_CONF, documentFrequencyPath);
 
		conf.set("mapreduce.map.java.opts", "-Xmx2600M");
		conf.set("mapreduce.map.memory.mb","2600")
        
        
		Job job = new Job(conf, "TwitterClassifier");

		job.setJarByClass(TwitterClassifier.class);
		
		
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(IntWritable.class);
		job.setMapperClass(ClassifierMap.class);

		job.setInputFormatClass(SequenceFileInputFormat.class);
		job.setOutputFormatClass(TextOutputFormat.class);

		FileInputFormat.addInputPath(job, new Path(tweetsPath));
		FileOutputFormat.setOutputPath(job, new Path(outputPath));

		job.waitForCompletion(true);
	}
}